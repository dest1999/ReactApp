{"ast":null,"code":"import { AUTHOR, BOT } from \"../../constants\";\nimport { ADD_MESSAGE, ADD_BOT_MESSAGE, DEL_MESSAGES_WITH_CHAT, ADD_DATABASE_MESSAGES } from \"../../constants/addMessage\";\nimport { writeMessagesData } from \"../../firebase-db-utils\";\nconst initialState = {\n  messageList: {}\n};\nexport const messagesReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_MESSAGE:\n      {\n        const currentList = state.messageList[action.chatId] || [];\n        writeMessagesData(action.chatId, action.message, currentList.length, action.userId);\n        return { ...state,\n          messageList: { ...state.messageList,\n            [action.chatId]: [...currentList, {\n              id: `${action.chatId}.${currentList.length + 1}`,\n              text: action.message,\n              author: AUTHOR\n            }]\n          }\n        };\n      }\n      ;\n\n    case ADD_BOT_MESSAGE:\n      {\n        const botMessage = 'Я бот';\n        const currentList = state.messageList[action.chatId] || [];\n        writeMessagesData(action.chatId, botMessage, currentList.length, 'botID');\n        return { ...state,\n          messageList: { ...state.messageList,\n            [action.chatId]: [...currentList, {\n              id: `${action.chatId}.${currentList.length + 1}`,\n              text: botMessage,\n              author: BOT\n            }]\n          }\n        };\n      }\n      ;\n\n    case ADD_DATABASE_MESSAGES:\n      {\n        const currentList = [];\n\n        if (action.data) {\n          Object.values(action.data).forEach((item, i) => {\n            currentList[i] = item;\n            item.userId === 'botID' ? currentList[i].author = BOT : currentList[i].author = AUTHOR;\n          });\n        }\n\n        return { ...state,\n          messageList: { ...state.messageList,\n            [action.chatId]: [...currentList]\n          }\n        };\n      }\n      ;\n\n    case DEL_MESSAGES_WITH_CHAT:\n      {\n        delete state.messageList[\"Chat\" + action.chatId];\n        const currentList = state.messageList;\n        return { ...state,\n          messageList: { ...currentList\n          }\n        };\n      }\n      ;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["AUTHOR","BOT","ADD_MESSAGE","ADD_BOT_MESSAGE","DEL_MESSAGES_WITH_CHAT","ADD_DATABASE_MESSAGES","writeMessagesData","initialState","messageList","messagesReducer","state","action","type","currentList","chatId","message","length","userId","id","text","author","botMessage","data","Object","values","forEach","item","i"],"sources":["C:/Users/serv_/source/repos/TryReact4usik/GB_React/myapp/src/reducers/messages/addMessage.js"],"sourcesContent":["import { AUTHOR, BOT } from \"../../constants\";\nimport { ADD_MESSAGE, ADD_BOT_MESSAGE, DEL_MESSAGES_WITH_CHAT, ADD_DATABASE_MESSAGES } from \"../../constants/addMessage\";\nimport { writeMessagesData } from \"../../firebase-db-utils\";\n\nconst initialState = {\n    messageList: {},\n};\n\nexport const messagesReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_MESSAGE: {\n            const currentList = state.messageList[action.chatId] || [];\n            writeMessagesData(action.chatId, action.message, currentList.length, action.userId);\n            return {\n                ...state,\n                messageList: {\n                    ...state.messageList,\n                    [action.chatId]: [\n                        ...currentList,\n                        {\n                            id: `${action.chatId}.${currentList.length+1}`,\n                            text: action.message,\n                            author: AUTHOR,\n                        },\n                    ],\n                },\n            };\n        };\n        case ADD_BOT_MESSAGE: {\n            const botMessage = 'Я бот';\n            const currentList = state.messageList[action.chatId] || [];\n            writeMessagesData(action.chatId, botMessage, currentList.length, 'botID');\n            return {\n                ...state,\n                messageList: {\n                    ...state.messageList,\n                    [action.chatId]: [\n                        ...currentList,\n                        {\n                            id: `${action.chatId}.${currentList.length+1}`,\n                            text: botMessage,\n                            author: BOT,\n                        },\n                    ],\n                },\n            };\n        };\n        case ADD_DATABASE_MESSAGES: {\n            const currentList = [];\n\n            if (action.data) {\n                Object.values(action.data).forEach((item, i) => {\n                    currentList[i] = item;\n                    item.userId === 'botID' ? currentList[i].author = BOT : currentList[i].author = AUTHOR;\n                });\n            }\n            \n            return {\n                ...state,\n                messageList: {\n                    ...state.messageList,\n                [action.chatId]: [\n                    ...currentList\n                ]\n                }\n            }\n        };\n        case DEL_MESSAGES_WITH_CHAT: {\n            delete state.messageList[\"Chat\"+action.chatId];\n            const currentList = state.messageList;\n            return {\n                ...state,\n                messageList: {\n                    ...currentList\n                }\n            };\n        };\n             \n        default:\n            return state;\n    }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}