{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\serv_\\\\source\\\\repos\\\\TryReact4usik\\\\GB_React\\\\myapp\\\\src\\\\context\\\\theme-provider.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useCallback, useState, useMemo } from 'react';\nimport { createTheme, ThemeProvider as MUIThemeProvider } from '@mui/material';\nimport { deepmerge } from '@mui/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ColorModeServicesContext = /*#__PURE__*/createContext(undefined);\nexport const ThemeProvider = _ref => {\n  _s();\n\n  let {\n    initialTheme = {},\n    initialMode = 'light',\n    children\n  } = _ref;\n  const [mode, setMode] = useState(initialMode);\n  const theme = useMemo(() => createTheme(deepmerge(initialTheme, {\n    palette: {\n      mode\n    }\n  })), [mode, initialTheme]);\n  const toggleColorMode = useCallback(() => {\n    setMode(prevMode => prevMode === 'light' ? 'dark' : 'light');\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ColorModeServicesContext.Provider, {\n    value: toggleColorMode,\n    children: /*#__PURE__*/_jsxDEV(MUIThemeProvider, {\n      theme: theme,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ThemeProvider, \"hfuwqFN3y8WzPKAT+1lBqWmPPvs=\");\n\n_c = ThemeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useCallback","useState","useMemo","createTheme","ThemeProvider","MUIThemeProvider","deepmerge","ColorModeServicesContext","undefined","initialTheme","initialMode","children","mode","setMode","theme","palette","toggleColorMode","prevMode"],"sources":["C:/Users/serv_/source/repos/TryReact4usik/GB_React/myapp/src/context/theme-provider.jsx"],"sourcesContent":["import React, {createContext, useCallback, useState, useMemo} from 'react';\nimport { createTheme, ThemeProvider as MUIThemeProvider } from '@mui/material';\nimport { deepmerge } from '@mui/utils';\n\nexport const ColorModeServicesContext = createContext(undefined);\n\nexport const ThemeProvider = ({ initialTheme = {}, initialMode = 'light', children }) => {\n    const [mode, setMode] = useState(initialMode);\n\n    const theme = useMemo(() =>\n        createTheme(deepmerge(initialTheme, { palette: { mode } })),\n        [mode, initialTheme]\n    );\n\n    const toggleColorMode = useCallback(() => {\n        setMode((prevMode) => prevMode === 'light' ? 'dark' : 'light');\n    }, []);\n\n    return (\n        <ColorModeServicesContext.Provider value = { toggleColorMode }>\n            <MUIThemeProvider theme={ theme }>\n                { children }\n            </MUIThemeProvider>\n        </ColorModeServicesContext.Provider>\n    )\n}"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,WAA9B,EAA2CC,QAA3C,EAAqDC,OAArD,QAAmE,OAAnE;AACA,SAASC,WAAT,EAAsBC,aAAa,IAAIC,gBAAvC,QAA+D,eAA/D;AACA,SAASC,SAAT,QAA0B,YAA1B;;AAEA,OAAO,MAAMC,wBAAwB,gBAAGR,aAAa,CAACS,SAAD,CAA9C;AAEP,OAAO,MAAMJ,aAAa,GAAG,QAA4D;EAAA;;EAAA,IAA3D;IAAEK,YAAY,GAAG,EAAjB;IAAqBC,WAAW,GAAG,OAAnC;IAA4CC;EAA5C,CAA2D;EACrF,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAACS,WAAD,CAAhC;EAEA,MAAMI,KAAK,GAAGZ,OAAO,CAAC,MAClBC,WAAW,CAACG,SAAS,CAACG,YAAD,EAAe;IAAEM,OAAO,EAAE;MAAEH;IAAF;EAAX,CAAf,CAAV,CADM,EAEjB,CAACA,IAAD,EAAOH,YAAP,CAFiB,CAArB;EAKA,MAAMO,eAAe,GAAGhB,WAAW,CAAC,MAAM;IACtCa,OAAO,CAAEI,QAAD,IAAcA,QAAQ,KAAK,OAAb,GAAuB,MAAvB,GAAgC,OAA/C,CAAP;EACH,CAFkC,EAEhC,EAFgC,CAAnC;EAIA,oBACI,QAAC,wBAAD,CAA0B,QAA1B;IAAmC,KAAK,EAAKD,eAA7C;IAAA,uBACI,QAAC,gBAAD;MAAkB,KAAK,EAAGF,KAA1B;MAAA,UACMH;IADN;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAOH,CAnBM;;GAAMP,a;;KAAAA,a"},"metadata":{},"sourceType":"module"}