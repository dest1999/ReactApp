{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { fetchUserLogin } from \"../firebase-auth\";\nimport { setError } from \"./errorSlice\";\nconst initialState = {\n  token: null,\n  uid: null,\n  email: null\n};\nexport const fetchSignInAction = createAsyncThunk('user/fetchLogin', async (params, _ref) => {\n  let {\n    dispatch\n  } = _ref;\n\n  try {\n    const {\n      accessToken,\n      email,\n      uid\n    } = await fetchUserLogin(params.email, params.password);\n    return {\n      accessToken,\n      email,\n      uid\n    };\n  } catch (error) {\n    dispatch(setError(error.message));\n  }\n});\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    signOut(state) {\n      return { ...state,\n        email: null,\n        token: null,\n        id: null\n      };\n    }\n\n  },\n  extraReducers: {\n    [fetchSignInAction.fulfilled]: (state, action) => {\n      state.token = action.payload.accessToken;\n      state.uid = action.payload.uid;\n      state.email = action.payload.email;\n    }\n  }\n});\nconst {\n  actions,\n  reducer\n} = userSlice;\nexport const {\n  signOut\n} = actions;\nexport default reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchUserLogin","setError","initialState","token","uid","email","fetchSignInAction","params","dispatch","accessToken","password","error","message","userSlice","name","reducers","signOut","state","id","extraReducers","fulfilled","action","payload","actions","reducer"],"sources":["C:/Users/serv_/source/repos/TryReact4usik/GB_React/myapp/src/slices/userSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { fetchUserLogin } from \"../firebase-auth\";\nimport { setError } from \"./errorSlice\";\n\nconst initialState = {\n    token: null,\n    uid: null,\n    email: null\n\n}\n\nexport const fetchSignInAction = createAsyncThunk(\n    'user/fetchLogin',\n    async (params, { dispatch }) => {\n        try{\n            const { accessToken, email, uid } = await fetchUserLogin(params.email, params.password);\n            return { accessToken, email, uid };\n        } catch (error) {\n            dispatch(setError(error.message));\n        }\n    }\n);\n\nconst userSlice = createSlice({\n    name: 'user',\n    initialState,\n    reducers: {\n        signOut(state) {\n            return {\n                ...state,\n                email: null,\n                token: null,\n                id: null,\n            }\n        },\n    },\n    extraReducers: {\n        [fetchSignInAction.fulfilled]: (state, action) => {\n            state.token = action.payload.accessToken;\n            state.uid = action.payload.uid;\n            state.email = action.payload.email;\n        }\n    }\n});\n\nconst {  actions, reducer } = userSlice;\n\nexport const { signOut } = actions;\nexport default reducer;"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,IADU;EAEjBC,GAAG,EAAE,IAFY;EAGjBC,KAAK,EAAE;AAHU,CAArB;AAOA,OAAO,MAAMC,iBAAiB,GAAGP,gBAAgB,CAC7C,iBAD6C,EAE7C,OAAOQ,MAAP,WAAgC;EAAA,IAAjB;IAAEC;EAAF,CAAiB;;EAC5B,IAAG;IACC,MAAM;MAAEC,WAAF;MAAeJ,KAAf;MAAsBD;IAAtB,IAA8B,MAAMJ,cAAc,CAACO,MAAM,CAACF,KAAR,EAAeE,MAAM,CAACG,QAAtB,CAAxD;IACA,OAAO;MAAED,WAAF;MAAeJ,KAAf;MAAsBD;IAAtB,CAAP;EACH,CAHD,CAGE,OAAOO,KAAP,EAAc;IACZH,QAAQ,CAACP,QAAQ,CAACU,KAAK,CAACC,OAAP,CAAT,CAAR;EACH;AACJ,CAT4C,CAA1C;AAYP,MAAMC,SAAS,GAAGf,WAAW,CAAC;EAC1BgB,IAAI,EAAE,MADoB;EAE1BZ,YAF0B;EAG1Ba,QAAQ,EAAE;IACNC,OAAO,CAACC,KAAD,EAAQ;MACX,OAAO,EACH,GAAGA,KADA;QAEHZ,KAAK,EAAE,IAFJ;QAGHF,KAAK,EAAE,IAHJ;QAIHe,EAAE,EAAE;MAJD,CAAP;IAMH;;EARK,CAHgB;EAa1BC,aAAa,EAAE;IACX,CAACb,iBAAiB,CAACc,SAAnB,GAA+B,CAACH,KAAD,EAAQI,MAAR,KAAmB;MAC9CJ,KAAK,CAACd,KAAN,GAAckB,MAAM,CAACC,OAAP,CAAeb,WAA7B;MACAQ,KAAK,CAACb,GAAN,GAAYiB,MAAM,CAACC,OAAP,CAAelB,GAA3B;MACAa,KAAK,CAACZ,KAAN,GAAcgB,MAAM,CAACC,OAAP,CAAejB,KAA7B;IACH;EALU;AAbW,CAAD,CAA7B;AAsBA,MAAM;EAAGkB,OAAH;EAAYC;AAAZ,IAAwBX,SAA9B;AAEA,OAAO,MAAM;EAAEG;AAAF,IAAcO,OAApB;AACP,eAAeC,OAAf"},"metadata":{},"sourceType":"module"}