{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\serv_\\\\source\\\\repos\\\\TryReact4usik\\\\GB_React\\\\myapp\\\\src\\\\components\\\\RenderPage.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Form } from \"./Form\";\nimport { MessagesList } from \"./MessagesList\";\nimport { ChatList } from \"./ChatList\"; // Контроллируемая форма\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useInput(defaultValue) {\n  _s();\n\n  const [value, setValue] = useState(defaultValue);\n\n  function onChange(e) {\n    setValue(e.target.value);\n  }\n\n  function reset() {\n    setValue('');\n  }\n\n  return {\n    value,\n    onChange,\n    reset\n  };\n}\n\n_s(useInput, \"+di++irDcPspjmhJVP9frUKGzpo=\");\n\nexport function RenderPage(props) {\n  _s2();\n\n  const inputProps = useInput(); // Получаем имя\n\n  const textareaProps = useInput(); // Получаем текст сообщения\n\n  const [messages, setMessages] = useState([]);\n\n  const updateMessages = message => {\n    // Записываем в массив данные из формы\n    message.key = messages.length + 1;\n    const copyArr = [...messages];\n    copyArr.push(message);\n    setMessages(copyArr); // console.log(message);\n  };\n\n  function addMessage() {\n    inputProps.value && textareaProps.value ? updateMessages({\n      autor: inputProps.value,\n      text: textareaProps.value\n    }) : console.log('Не заполнено поле ввода');\n  }\n\n  function addBotMessage() {\n    let item = messages[messages.length - 1];\n\n    if (item && item.autor !== 'Bot') {\n      updateMessages({\n        autor: 'Bot',\n        text: 'Your request has been accepted'\n      });\n    }\n  }\n\n  useEffect(() => {\n    // Записываем ответ робота в массив сообщений\n    let timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(addBotMessage, 9000);\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatlist\",\n      children: /*#__PURE__*/_jsxDEV(ChatList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messageList\",\n      children: /*#__PURE__*/_jsxDEV(MessagesList, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      inputProps: inputProps,\n      textareaProps: textareaProps,\n      addMessage: addMessage,\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(RenderPage, \"HkPuXPxloAGn4ibwxhYHTsAeWlU=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = RenderPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderPage\");","map":{"version":3,"names":["React","useState","useEffect","Form","MessagesList","ChatList","useInput","defaultValue","value","setValue","onChange","e","target","reset","RenderPage","props","inputProps","textareaProps","messages","setMessages","updateMessages","message","key","length","copyArr","push","addMessage","autor","text","console","log","addBotMessage","item","timeout","clearTimeout","setTimeout"],"sources":["C:/Users/serv_/source/repos/TryReact4usik/GB_React/myapp/src/components/RenderPage.jsx"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Form } from \"./Form\";\nimport { MessagesList } from \"./MessagesList\";\nimport { ChatList } from \"./ChatList\";\n\n// Контроллируемая форма\nfunction useInput(defaultValue) {\n    const [value, setValue] = useState(defaultValue);\n\n    function onChange(e) {\n        setValue(e.target.value);\n    }\n\n    function reset(){\n        setValue('');\n    }\n\n    return {\n        value,\n        onChange,\n        reset\n    };\n}\n\nexport function RenderPage(props) {\n    const inputProps = useInput(); // Получаем имя\n    const textareaProps = useInput(); // Получаем текст сообщения\n\n    const [messages, setMessages] = useState([]);\n\n    const updateMessages = (message) => { // Записываем в массив данные из формы\n        message.key = messages.length+1;\n        const copyArr = [...messages];\n        copyArr.push(message);\n        setMessages(copyArr);\n        // console.log(message);\n    }\n\n    function addMessage() {\n        inputProps.value && textareaProps.value ?\n        updateMessages({autor: inputProps.value, text: textareaProps.value}) :\n        console.log('Не заполнено поле ввода');\n    }\n\n    function addBotMessage() {\n        let item = messages[messages.length - 1];\n        if (item && item.autor !== 'Bot') {\n            updateMessages({ autor: 'Bot', text: 'Your request has been accepted'})\n        }\n    }\n\n    useEffect(() => { // Записываем ответ робота в массив сообщений\n        let timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(addBotMessage, 9000);\n    }, [messages]);\n\n    return (\n        <div className=\"content\">\n            <div className=\"chatlist\">\n                <ChatList />\n            </div>\n            <div className=\"messageList\">\n            <MessagesList messages={messages}/>\n            </div>\n            <Form inputProps = {inputProps} textareaProps={textareaProps} addMessage={addMessage} messages={messages} />\n        </div>\n    )\n}\n\n"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,QAAT,QAAyB,YAAzB,C,CAEA;;;;AACA,SAASC,QAAT,CAAkBC,YAAlB,EAAgC;EAAA;;EAC5B,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAACM,YAAD,CAAlC;;EAEA,SAASG,QAAT,CAAkBC,CAAlB,EAAqB;IACjBF,QAAQ,CAACE,CAAC,CAACC,MAAF,CAASJ,KAAV,CAAR;EACH;;EAED,SAASK,KAAT,GAAgB;IACZJ,QAAQ,CAAC,EAAD,CAAR;EACH;;EAED,OAAO;IACHD,KADG;IAEHE,QAFG;IAGHG;EAHG,CAAP;AAKH;;GAhBQP,Q;;AAkBT,OAAO,SAASQ,UAAT,CAAoBC,KAApB,EAA2B;EAAA;;EAC9B,MAAMC,UAAU,GAAGV,QAAQ,EAA3B,CAD8B,CACC;;EAC/B,MAAMW,aAAa,GAAGX,QAAQ,EAA9B,CAF8B,CAEI;;EAElC,MAAM,CAACY,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,EAAD,CAAxC;;EAEA,MAAMmB,cAAc,GAAIC,OAAD,IAAa;IAAE;IAClCA,OAAO,CAACC,GAAR,GAAcJ,QAAQ,CAACK,MAAT,GAAgB,CAA9B;IACA,MAAMC,OAAO,GAAG,CAAC,GAAGN,QAAJ,CAAhB;IACAM,OAAO,CAACC,IAAR,CAAaJ,OAAb;IACAF,WAAW,CAACK,OAAD,CAAX,CAJgC,CAKhC;EACH,CAND;;EAQA,SAASE,UAAT,GAAsB;IAClBV,UAAU,CAACR,KAAX,IAAoBS,aAAa,CAACT,KAAlC,GACAY,cAAc,CAAC;MAACO,KAAK,EAAEX,UAAU,CAACR,KAAnB;MAA0BoB,IAAI,EAAEX,aAAa,CAACT;IAA9C,CAAD,CADd,GAEAqB,OAAO,CAACC,GAAR,CAAY,yBAAZ,CAFA;EAGH;;EAED,SAASC,aAAT,GAAyB;IACrB,IAAIC,IAAI,GAAGd,QAAQ,CAACA,QAAQ,CAACK,MAAT,GAAkB,CAAnB,CAAnB;;IACA,IAAIS,IAAI,IAAIA,IAAI,CAACL,KAAL,KAAe,KAA3B,EAAkC;MAC9BP,cAAc,CAAC;QAAEO,KAAK,EAAE,KAAT;QAAgBC,IAAI,EAAE;MAAtB,CAAD,CAAd;IACH;EACJ;;EAED1B,SAAS,CAAC,MAAM;IAAE;IACd,IAAI+B,OAAJ;IACAC,YAAY,CAACD,OAAD,CAAZ;IACAA,OAAO,GAAGE,UAAU,CAACJ,aAAD,EAAgB,IAAhB,CAApB;EACH,CAJQ,EAIN,CAACb,QAAD,CAJM,CAAT;EAMA,oBACI;IAAK,SAAS,EAAC,SAAf;IAAA,wBACI;MAAK,SAAS,EAAC,UAAf;MAAA,uBACI,QAAC,QAAD;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QADJ,eAII;MAAK,SAAS,EAAC,aAAf;MAAA,uBACA,QAAC,YAAD;QAAc,QAAQ,EAAEA;MAAxB;QAAA;QAAA;QAAA;MAAA;IADA;MAAA;MAAA;MAAA;IAAA,QAJJ,eAOI,QAAC,IAAD;MAAM,UAAU,EAAIF,UAApB;MAAgC,aAAa,EAAEC,aAA/C;MAA8D,UAAU,EAAES,UAA1E;MAAsF,QAAQ,EAAER;IAAhG;MAAA;MAAA;MAAA;IAAA,QAPJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAWH;;IA5CeJ,U;UACOR,Q,EACGA,Q;;;KAFVQ,U"},"metadata":{},"sourceType":"module"}